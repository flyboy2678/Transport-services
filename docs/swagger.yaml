basePath: /v1
definitions:
  main.CreateBookingPayload:
    properties:
      status:
        type: string
      trip_id:
        type: integer
      user_id:
        type: integer
    type: object
  main.CreateCommentPayload:
    properties:
      comment:
        type: string
      rating:
        type: integer
      trip_id:
        type: integer
      user_id:
        type: integer
    required:
    - comment
    - rating
    - trip_id
    - user_id
    type: object
  main.CreateInvoicePayload:
    properties:
      due_date:
        type: string
      invoice_number:
        type: string
      payment_id:
        type: integer
      status:
        type: string
    required:
    - due_date
    - invoice_number
    - payment_id
    - status
    type: object
  main.CreatePaymentPayload:
    properties:
      amount:
        type: number
      booking_id:
        type: integer
      status:
        type: string
      transation_id:
        type: string
      user_id:
        type: integer
    required:
    - amount
    - booking_id
    - status
    - transation_id
    - user_id
    type: object
  main.CreatePhotoPayload:
    properties:
      photo_url:
        type: string
      trip_id:
        type: integer
    required:
    - photo_url
    - trip_id
    type: object
  main.CreateSubPayload:
    properties:
      email:
        type: string
      user_id:
        type: integer
    required:
    - email
    - user_id
    type: object
  main.CreateTripPayload:
    properties:
      available_seats:
        type: integer
      description:
        maxLength: 255
        type: string
      end_date:
        type: string
      location:
        maxLength: 100
        type: string
      name:
        maxLength: 100
        type: string
      price:
        type: number
      seats:
        type: integer
      start_date:
        type: string
    required:
    - available_seats
    - description
    - end_date
    - location
    - name
    - price
    - seats
    - start_date
    type: object
  main.CreateUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 100
        type: string
      last_name:
        maxLength: 100
        type: string
      password:
        maxLength: 24
        minLength: 8
        type: string
      phone:
        maxLength: 255
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  main.LogInPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 24
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 100
        type: string
      last_name:
        maxLength: 100
        type: string
      password:
        maxLength: 24
        minLength: 8
        type: string
      phone:
        maxLength: 255
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  main.UpdateBookingPayload:
    properties:
      id:
        type: integer
      status:
        type: string
    required:
    - id
    - status
    type: object
  main.UpdateInvoicePayload:
    properties:
      invoice_number:
        type: string
      status:
        type: string
    required:
    - invoice_number
    - status
    type: object
  main.UpdatePaymentPayload:
    properties:
      id:
        type: integer
      status:
        type: string
    required:
    - id
    - status
    type: object
  store.Booking:
    properties:
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      trip_id:
        type: integer
      user_id:
        type: integer
    type: object
  store.Comment:
    properties:
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      trip_id:
        type: integer
      user_id:
        type: integer
    type: object
  store.Invoice:
    properties:
      due_date:
        type: string
      id:
        type: integer
      invoice_number:
        type: string
      issue_at:
        type: string
      payment_id:
        type: integer
      status:
        type: string
    type: object
  store.Payment:
    properties:
      amount:
        type: number
      booking_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      status:
        type: string
      transation_id:
        type: string
      user_id:
        type: integer
    type: object
  store.Photo:
    properties:
      id:
        type: integer
      photo_url:
        type: string
      trip_id:
        type: integer
      uploaded_at:
        type: string
    type: object
  store.Subscription:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      user_id:
        type: integer
    type: object
  store.Trip:
    properties:
      available_seats:
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      price:
        type: number
      seats:
        type: integer
      start_date:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
info:
  contact: {}
  title: Transport Service Api
  version: "1.0"
paths:
  /booking/userId/{id}:
    get:
      consumes:
      - application/json
      description: Fetches bookings by a user id
      parameters:
      - description: booking id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Booking'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches bookings
      tags:
      - bookings
  /bookings:
    post:
      consumes:
      - application/json
      description: Creates a booking
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateBookingPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Booking'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a booking
      tags:
      - bookings
  /bookings/id/{id}:
    get:
      consumes:
      - application/json
      description: fetches a booking by id
      parameters:
      - description: booking id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Booking'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: fetches a booking
      tags:
      - bookings
    patch:
      consumes:
      - application/json
      description: Updates a booking by ID
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateBookingPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Booking'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Updates a booking
      tags:
      - bookings
  /bookings/tripId/{id}:
    get:
      consumes:
      - application/json
      description: Fetches bookings by id
      parameters:
      - description: booking id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Booking'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches bookings
      tags:
      - bookings
  /comments:
    post:
      consumes:
      - application/json
      description: Creates a comment
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateCommentPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Comment'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a comment
      tags:
      - comments
  /comments/id/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a comment by id
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes a comment
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Fetches comments by id
      parameters:
      - description: comment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Comment'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches comments by id
      tags:
      - comments
  /comments/tripId/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes comments by a trip id
      parameters:
      - description: trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes comments
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Fetches comments by a trip id
      parameters:
      - description: Trip id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Comment'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches comments by a trip id
      tags:
      - comments
  /invoice:
    post:
      consumes:
      - application/json
      description: Creates a invoice
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateInvoicePayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Invoice'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a invoice
      tags:
      - invoices
  /invoice/invoiceNumber/{invoiceNumber}:
    get:
      consumes:
      - application/json
      description: fetches a invoice by invoice number
      parameters:
      - description: invoice number
        in: path
        name: invoiceNumber
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Invoice'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: fetches a invoice
      tags:
      - invoices
    patch:
      consumes:
      - application/json
      description: Updates a invoice by invoice number
      parameters:
      - description: invoice number
        in: path
        name: invoiceNumber
        required: true
        type: string
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateInvoicePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Invoice'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Updates a invoice
      tags:
      - invoices
  /login:
    post:
      consumes:
      - application/json
      description: Handles user log in
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.LogInPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Handles user log in
      tags:
      - auth
  /payments:
    post:
      consumes:
      - application/json
      description: Creates a payment
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreatePaymentPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Payment'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a payment
      tags:
      - payments
  /payments/id/{id}:
    patch:
      consumes:
      - application/json
      description: Updates a payment by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePaymentPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Payment'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Updates a payment
      tags:
      - payments
  /payments/userId/{id}:
    get:
      consumes:
      - application/json
      description: Fetches payments by a user id
      parameters:
      - description: payments id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Payment'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches payments
      tags:
      - payments
  /photo:
    post:
      consumes:
      - application/json
      description: Creates a photo
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreatePhotoPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Photo'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a photo
      tags:
      - photos
  /photos/id/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a photo by id
      parameters:
      - description: photo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes a photo
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Fetches a photo by id
      parameters:
      - description: Photo id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Photo'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a photo by id
      tags:
      - photos
  /photos/tripId/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes photos by a trip id
      parameters:
      - description: Trip ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes photos
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Fetches photos by a trip id
      parameters:
      - description: Trip id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Photo'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches photos by a trip id
      tags:
      - photos
  /register:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - auth
  /subscriptions:
    get:
      consumes:
      - application/json
      description: Fetches all subscriptions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Subscription'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches all subscriptions
      tags:
      - subscriptions
    post:
      consumes:
      - application/json
      description: Creates a subscription
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateSubPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Subscription'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a subscription
      tags:
      - subscriptions
  /subscriptions/email/{email}:
    delete:
      consumes:
      - application/json
      description: Deletes a subscription by email
      parameters:
      - description: Subscription email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes a subscription
      tags:
      - subscriptions
  /subscriptions/id/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a subscription by id
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes a subscription
      tags:
      - subscriptions
  /trips:
    get:
      consumes:
      - application/json
      description: Fetches all trips
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Trip'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches all trips
      tags:
      - trips
    post:
      consumes:
      - application/json
      description: Creates a trip
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateTripPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.Trip'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a trip
      tags:
      - trips
  /trips/id/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a trip by id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Trip'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a trip by id
      tags:
      - trips
  /trips/location/{location}:
    get:
      consumes:
      - application/json
      description: Fetches a trip by location
      parameters:
      - description: Trip Location
        in: path
        name: location
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Trip'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a trip by location
      tags:
      - trips
  /trips/upcoming:
    get:
      consumes:
      - application/json
      description: Fetches all upcoming trips
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Trip'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches all upcoming trips
      tags:
      - trips
  /users:
    post:
      consumes:
      - application/json
      description: Creates a user
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserPayload'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a user
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Fetches a user by id
      parameters:
      - description: User email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a user
      tags:
      - users
  /users/id/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Deletes a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Fetches a user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a user
      tags:
      - users
swagger: "2.0"
